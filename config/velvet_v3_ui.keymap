#include "keys_ru.h"
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        cap_sen: cap_sen {
            compatible = "zmk,behavior-hold-tap";
            label = "CAP_SEN";
            bindings = <&mo>, <&mo>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-while-undecided;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick-tap-ms = <75>;
            flavor = "tap-preferred";
        };

        tog_on: tog_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "TOG_ON";
            #binding-cells = <1>;
        };

        tog_off: tog_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "TOG_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        mac_ru_dotcomma: mac_ru_dotcomma {
            compatible = "zmk,behavior-mod-morph";
            label = "MAC_RU_DOTCOMMA";
            bindings = <&kp LS(NUMBER_7)>, <&kp LS(NUMBER_6)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        ltc: ltc {
            compatible = "zmk,behavior-hold-tap";
            label = "LTC";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            quick-tap-ms = <50>;
        };
    };

    combos {
        compatible = "zmk,combos";

        rt-par-open {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <5 4>;
            timeout-ms = <20>;
        };

        yu-par-close {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
            timeout-ms = <20>;
        };

        gf-sq-open {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <17 16>;
            timeout-ms = <20>;
        };

        hj-sq-close {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <18 19>;
            timeout-ms = <20>;
        };

        bv-curl-open {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <29 28>;
            timeout-ms = <20>;
        };

        nm-curl-close {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <30 31>;
            timeout-ms = <20>;
        };

        er-minus {
            bindings = <&kp MINUS>;
            key-positions = <3 4>;
            timeout-ms = <20>;
        };

        ui-underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <7 8>;
            timeout-ms = <20>;
        };

        fd-double-quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <16 15>;
            timeout-ms = <20>;
        };

        jk-single-quote {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <19 20>;
            timeout-ms = <20>;
        };

        we-plus {
            bindings = <&kp PLUS>;
            key-positions = <2 3>;
            timeout-ms = <20>;
        };

        io-pipe {
            bindings = <&kp PIPE>;
            key-positions = <8 9>;
            timeout-ms = <20>;
        };

        cv-less {
            bindings = <&kp LESS_THAN>;
            key-positions = <28 27>;
            timeout-ms = <20>;
        };

        mB-great {
            bindings = <&kp GREATER_THAN>;
            key-positions = <31 32>;
            timeout-ms = <20>;
        };

        qa-tilde {
            bindings = <&kp TILDE>;
            key-positions = <1 13>;
            timeout-ms = <20>;
        };

        az-grave {
            bindings = <&kp LS(GRAVE)>;
            key-positions = <25 13>;
            timeout-ms = <20>;
        };

        to-en-mac {
            bindings = <&to_en_mac>;
            key-positions = <39 28>;
            layers = <0 1 2 3>;
        };

        to-ru-mac {
            bindings = <&to_ru_mac>;
            key-positions = <39 29>;
            layers = <0 1 2 3>;
        };

        to-en-win {
            bindings = <&to_en_win>;
            key-positions = <39 28>;
            layers = <5 6 10 8>;
        };

        to-ru-win {
            bindings = <&to_ru_win>;
            key-positions = <39 29>;
            layers = <0 1 2 3>;
        };
    };

    macros {
        bt_mac: bt_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &to 0 &tog_on 2>;
            label = "BT_MAC";
        };

        bt_win: bt_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &to 5 &tog_on 7>;
            label = "BT_WIN";
        };

        to_en_mac: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(NUMBER_1)) &to 0 &tog_on 2>;
            label = "TO_EN";
        };

        to_ru_mac: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(NUMBER_2)) &to 1 &tog_on 2>;
            label = "LAYER_RU";
        };

        to_en_win: to_en_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LS(NUMBER_1)) &to 5 &tog_on 7>;
            label = "TO_EN_WIN";
        };

        to_ru_win: to_ru_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(NUMBER_2)) &to 6 &tog_on 7>;
            label = "TO_RU_WIN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BaseEnMac {
            display-name = "BaseEnMac";
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E  &kp R  &kp T                         &kp Y   &kp U   &kp I      &kp O    &kp P     &kp LEFT_BRACKET
&kp ESC    &kp A  &kp S  &kp D  &kp F  &kp G                         &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C  &kp V  &kp B                         &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_BRACKET
                  &none  &none  &none  &ltc 3 SPACE  &none    &none  &mo 10  &mo 12  &none      &none
            >;
        };

        BaseRuMac {
            display-name = "BaseRuMac";
            bindings = <
&kp TAB     &kp RU_CYRILLIC_SHORT_I  &kp RU_CYRILLIC_TSE   &kp RU_CYRILLIC_U   &kp RU_CYRILLIC_KA  &kp RU_CYRILLIC_IE                  &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE        &kp RU_CYRILLIC_SHA  &kp RU_CYRILLIC_SHCHA  &kp RU_CYRILLIC_ZE   &kp RU_CYRILLIC_HA
&kp ESCAPE  &kp RU_CYRILLIC_EF       &kp RU_CYRILLIC_YERU  &kp RU_CYRILLIC_VE  &kp RU_CYRILLIC_A   &kp RU_CYRILLIC_PE                  &kp RU_CYRILLIC_ER  &kp RU_CYRILLIC_O          &kp RU_CYRILLIC_EL   &kp RU_CYRILLIC_DE     &kp RU_CYRILLIC_ZHE  &kp RU_CYRILLIC_E
&kp LSHFT   &kp RU_CYRILLIC_YA       &kp RU_CYRILLIC_CHE   &kp RU_CYRILLIC_ES  &kp RU_CYRILLIC_EM  &kp RU_CYRILLIC_I                   &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_BE   &kp RU_CYRILLIC_YU     &mac_ru_dotcomma     &kp RU_CYRILLIC_HARD_SIGN
                                     &kp RU_BACKSLASH      &none               &none               &ltc 4 SPACE        &none    &none  &mo 10              &mo 12                     &kp RU_CYRILLIC_IO   &none
            >;
        };

        ModsMac {
            display-name = "ModsMac";
            bindings = <
&trans  &trans             &trans               &trans            &trans               &trans                                 &trans         &trans                &trans            &trans                &trans                 &trans
&trans  &hrm LEFT_SHIFT A  &hrm LEFT_CONTROL S  &hrm LEFT_ALT D   &hrm LEFT_COMMAND F  &trans                                 &trans         &hrm RIGHT_COMMAND J  &hrm RIGHT_ALT K  &hrm RIGHT_CONTROL L  &hrm RIGHT_SHIFT SEMI  &trans
&trans  &trans             &trans               &trans            &trans               &trans                                 &trans         &trans                &trans            &trans                &trans                 &trans
                           &trans               &kp LEFT_CONTROL  &kp LEFT_COMMAND     &trans  &kp LEFT_ALT    &kp BACKSPACE  &ltc 10 ENTER  &mo 12                &trans            &kp ENTER
            >;
        };

        NumSymEnMac {
            bindings = <
&trans  &kp N1           &kp N2       &kp N3    &kp N4      &kp NUMBER_5                    &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                     &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans           &trans       &trans    &to_en_mac  &to_ru_mac                      &trans     &trans         &kp COMMA     &kp DOT               &kp QUESTION           &trans
                         &trans       &trans    &trans      &trans        &trans    &trans  &mo 11     &trans         &trans        &trans
            >;

            display-name = "NumSymEnMac";
        };

        NumSymRuMac {
            display-name = "NumSymRuMac";
            bindings = <
&trans  &kp N1           &kp N2       &kp N3    &kp N4      &kp NUMBER_5                    &kp N6     &kp N7         &kp N8            &kp N9                &kp N0                 &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                     &kp CARET  &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans           &trans       &trans    &to_en_mac  &to_ru_mac                      &trans     &trans         &kp LS(NUMBER_6)  &kp LS(NUMBER_7)      &kp QUESTION           &trans
                         &trans       &trans    &trans      &trans        &trans    &trans  &mo 11     &trans         &trans            &trans
            >;
        };

        BaseEnWin {
            display-name = "BaseEnWin";
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E  &kp R  &kp T                         &kp Y   &kp U   &kp I      &kp O    &kp P     &kp LEFT_BRACKET
&kp ESC    &kp A  &kp S  &kp D  &kp F  &kp G                         &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C  &kp V  &kp B                         &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_BRACKET
                  &none  &none  &none  &ltc 8 SPACE  &none    &none  &mo 10  &mo 12  &none      &none
            >;
        };

        BaseRuWin {
            display-name = "BaseRuWin";
            bindings = <
&kp TAB     &kp RU_CYRILLIC_SHORT_I  &kp RU_CYRILLIC_TSE   &kp RU_CYRILLIC_U   &kp RU_CYRILLIC_KA  &kp RU_CYRILLIC_IE                  &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_GHE        &kp RU_CYRILLIC_SHA  &kp RU_CYRILLIC_SHCHA  &kp RU_CYRILLIC_ZE   &kp RU_CYRILLIC_HA
&kp ESCAPE  &kp RU_CYRILLIC_EF       &kp RU_CYRILLIC_YERU  &kp RU_CYRILLIC_VE  &kp RU_CYRILLIC_A   &kp RU_CYRILLIC_PE                  &kp RU_CYRILLIC_ER  &kp RU_CYRILLIC_O          &kp RU_CYRILLIC_EL   &kp RU_CYRILLIC_DE     &kp RU_CYRILLIC_ZHE  &kp RU_CYRILLIC_E
&kp LSHFT   &kp RU_CYRILLIC_YA       &kp RU_CYRILLIC_CHE   &kp RU_CYRILLIC_ES  &kp RU_CYRILLIC_EM  &kp RU_CYRILLIC_I                   &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_BE   &kp RU_CYRILLIC_YU     &kp SLASH            &kp RU_CYRILLIC_HARD_SIGN
                                     &kp RU_CYRILLIC_IO    &none               &none               &ltc 9 SPACE        &none    &none  &mo 10              &mo 12                     &kp RU_BACKSLASH     &none
            >;
        };

        ModWin {
            display-name = "ModWin";
            bindings = <
&trans  &trans             &trans               &trans            &trans               &trans                                 &trans         &trans               &trans            &trans                &trans                 &trans
&trans  &hrm LEFT_SHIFT A  &hrm LEFT_COMMAND S  &hrm LEFT_ALT D   &hrm LEFT_CONTROL F  &trans                                 &trans         &hrm LEFT_CONTROL J  &hrm RIGHT_ALT K  &hrm RIGHT_COMMAND L  &hrm RIGHT_SHIFT SEMI  &trans
&trans  &trans             &trans               &trans            &trans               &trans                                 &trans         &trans               &trans            &trans                &trans                 &trans
                           &trans               &kp LEFT_COMMAND  &kp LEFT_CONTROL     &trans  &kp LEFT_ALT    &kp BACKSPACE  &ltc 10 ENTER  &mo 12               &trans            &kp ENTER
            >;
        };

        NumSymEnWin {
            display-name = "NumSymEnWin";
            bindings = <
&trans  &kp N1           &kp N2       &kp N3    &kp N4      &kp NUMBER_5                    &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                     &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans           &trans       &trans    &to_en_win  &to_ru_win                      &trans     &trans         &kp COMMA     &kp DOT               &kp QUESTION           &trans
                         &trans       &trans    &trans      &trans        &trans    &trans  &mo 11     &trans         &trans        &trans
            >;
        };

        NumSymRuWin {
            display-name = "NumSymRuWin";
            bindings = <
&trans  &kp N1           &kp N2       &kp N3    &kp N4      &kp NUMBER_5                    &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &trans
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                     &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &trans           &trans       &trans    &to_en_win  &to_ru_win                      &trans     &trans         &kp RU_COMMA  &kp RU_DOT            &kp RU_QUESTION        &trans
                         &trans       &trans    &trans      &trans        &trans    &trans  &mo 11     &trans         &trans        &trans
            >;
        };

        Navigation {
            bindings = <
&trans  &kp F1   &kp F2   &kp F3   &kp F4   &kp F5                     &kp DELETE          &kp END         &kp HOME      &kp INSERT           &trans  &trans
&trans  &kp F6   &kp F7   &kp F8   &kp F9   &kp F10                    &kp LEFT_ARROW      &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW      &trans  &trans
&trans  &kp F11  &kp F12  &kp F13  &kp F14  &kp F15                    &kp LC(LEFT_ARROW)  &kp PAGE_DOWN   &kp PAGE_UP   &kp LC(RIGHT_ARROW)  &trans  &trans
                 &trans   &trans   &trans   &mo 11   &trans    &trans  &trans              &trans          &trans        &trans
            >;

            display-name = "Navigation";
        };

        Adjust {
            bindings = <
&bootloader  &none  &kp F1  &kp F2   &kp F3   &kp F4                   &bt_mac       &bt_win       &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&none        &none  &kp F5  &kp F6   &kp F7   &kp F8                   &out OUT_BLE  &kp C_VOL_DN  &kp K_MUTE        &kp C_VOL_UP  &none         &studio_unlock
&none        &none  &kp F9  &kp F10  &kp F11  &kp F12                  &out OUT_USB  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &none         &none
                    &none   &none    &none    &none    &none    &none  &none         &none         &none             &none
            >;

            display-name = "Adjust";
        };

        Mouse {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&mo 14  &mo 13  &mkp MB3  &mkp MB2  &mkp MB1  &trans                    &trans  &mkp MB1  &mkp MB2  &mkp MB3  &mo 13  &mo 14
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;
        };

        Scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        Sniper {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &mkp MB3  &mkp MB2  &mkp MB1  &trans                    &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};

&trackball { cpi = <1000>; };

&trackball_listener {
    input-processors = <&zip_xy_scaler 9 20>;

    scroller {
        layers = <13>;
        input-processors =
            <&zip_xy_transform INPUT_TRANSFORM_Y_INVERT>,
            <&zip_xy_scaler 1 32>,
            <&zip_xy_to_scroll_mapper>;
    };

    sniper {
        layers = <14>;
        input-processors = <&zip_xy_scaler 1 4>;
    };
};
